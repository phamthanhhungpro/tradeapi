// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using trade.InfraModel.DataAccess;

#nullable disable

namespace trade.InfraModel.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240802204814_20240802091059_20240731040837_ProductnCategoryTable")]
    partial class _20240802091059_20240731040837_ProductnCategoryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("trade.InfraModel.DataAccess.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc942bb7-690a-4dc1-afb0-d78182e6a825"),
                            CategoryName = "Social Media",
                            CreatedAt = new DateTime(2024, 8, 2, 20, 48, 14, 428, DateTimeKind.Utc).AddTicks(1792),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0c53faa2-ee7d-4cca-be17-ac9f751deb77"),
                            CategoryName = "Gaming",
                            CreatedAt = new DateTime(2024, 8, 2, 20, 48, 14, 428, DateTimeKind.Utc).AddTicks(1796),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("trade.InfraModel.DataAccess.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58f8d9e2-a1e4-4555-a5a4-68b4707388ae"),
                            CategoryId = new Guid("cc942bb7-690a-4dc1-afb0-d78182e6a825"),
                            CreatedAt = new DateTime(2024, 8, 2, 20, 48, 14, 428, DateTimeKind.Utc).AddTicks(2220),
                            IsDeleted = false,
                            Name = "Facebook Account"
                        },
                        new
                        {
                            Id = new Guid("aa49ea13-022d-4437-8534-1753207eacc2"),
                            CategoryId = new Guid("cc942bb7-690a-4dc1-afb0-d78182e6a825"),
                            CreatedAt = new DateTime(2024, 8, 2, 20, 48, 14, 428, DateTimeKind.Utc).AddTicks(2223),
                            IsDeleted = false,
                            Name = "TikTok Account"
                        },
                        new
                        {
                            Id = new Guid("f7182ab4-eec8-4e96-966e-9ab7c66a0f8a"),
                            CategoryId = new Guid("0c53faa2-ee7d-4cca-be17-ac9f751deb77"),
                            CreatedAt = new DateTime(2024, 8, 2, 20, 48, 14, 428, DateTimeKind.Utc).AddTicks(2226),
                            IsDeleted = false,
                            Name = "Garena Account"
                        });
                });

            modelBuilder.Entity("trade.InfraModel.DataAccess.Token", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("trade.InfraModel.DataAccess.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PassWordHash")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("trade.InfraModel.DataAccess.Product", b =>
                {
                    b.HasOne("trade.InfraModel.DataAccess.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("trade.InfraModel.DataAccess.Token", b =>
                {
                    b.HasOne("trade.InfraModel.DataAccess.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("trade.InfraModel.DataAccess.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("trade.InfraModel.DataAccess.User", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
